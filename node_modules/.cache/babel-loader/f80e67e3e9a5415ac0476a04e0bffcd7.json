{"ast":null,"code":"import { Cloudinary as CoreCloudinary, Util } from 'cloudinary-core';\nexport const url = (publicId, options) => {\n  const scOptions = Util.withSnakeCaseKeys(options);\n  const cl = CoreCloudinary.new();\n  return cl.url(publicId, scOptions);\n};\nexport const openUploadWidget = (options, callback) => {\n  const scOptions = Util.withSnakeCaseKeys(options);\n  window.cloudinary.openUploadWidget(scOptions, callback);\n};\nexport async function fetchPhotos(imageTag, setter) {\n  const options = {\n    cloudName: 'asmarphotocloud',\n    format: 'json',\n    type: 'list',\n    version: Math.ceil(new Date().getTime() / 1000)\n  };\n  const urlPath = url(imageTag.toString(), options);\n  fetch(urlPath);\n  console.log(urlPath).then(res => res.text()).then(text => text ? setter(JSON.parse(text).resources.map(image => image.public_id)) : []).catch(err => console.log(err));\n}\n;","map":{"version":3,"sources":["/home/asmar/code/photoscope/src/util/CloudinaryService.js"],"names":["Cloudinary","CoreCloudinary","Util","url","publicId","options","scOptions","withSnakeCaseKeys","cl","new","openUploadWidget","callback","window","cloudinary","fetchPhotos","imageTag","setter","cloudName","format","type","version","Math","ceil","Date","getTime","urlPath","toString","fetch","console","log","then","res","text","JSON","parse","resources","map","image","public_id","catch","err"],"mappings":"AAAA,SAASA,UAAU,IAAIC,cAAvB,EAAuCC,IAAvC,QAAmD,iBAAnD;AAEA,OAAO,MAAMC,GAAG,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACxC,QAAMC,SAAS,GAAGJ,IAAI,CAACK,iBAAL,CAAuBF,OAAvB,CAAlB;AACA,QAAMG,EAAE,GAAGP,cAAc,CAACQ,GAAf,EAAX;AACA,SAAOD,EAAE,CAACL,GAAH,CAAOC,QAAP,EAAiBE,SAAjB,CAAP;AACD,CAJM;AAMP,OAAO,MAAMI,gBAAgB,GAAG,CAACL,OAAD,EAAUM,QAAV,KAAuB;AACrD,QAAML,SAAS,GAAGJ,IAAI,CAACK,iBAAL,CAAuBF,OAAvB,CAAlB;AACAO,EAAAA,MAAM,CAACC,UAAP,CAAkBH,gBAAlB,CAAmCJ,SAAnC,EAA8CK,QAA9C;AACD,CAHM;AAKP,OAAO,eAAeG,WAAf,CAA2BC,QAA3B,EAAqCC,MAArC,EAA6C;AAClD,QAAMX,OAAO,GAAG;AACdY,IAAAA,SAAS,EAAE,iBADG;AAEdC,IAAAA,MAAM,EAAE,MAFM;AAGdC,IAAAA,IAAI,EAAE,MAHQ;AAIdC,IAAAA,OAAO,EAAEC,IAAI,CAACC,IAAL,CAAU,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAjC;AAJK,GAAhB;AAOA,QAAMC,OAAO,GAAGtB,GAAG,CAACY,QAAQ,CAACW,QAAT,EAAD,EAAsBrB,OAAtB,CAAnB;AAEAsB,EAAAA,KAAK,CAACF,OAAD,CAAL;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ,EACGK,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQE,IAAI,IAAKA,IAAI,GAAGhB,MAAM,CAACiB,IAAI,CAACC,KAAL,CAAWF,IAAX,EAAiBG,SAAjB,CAA2BC,GAA3B,CAA+BC,KAAK,IAAIA,KAAK,CAACC,SAA9C,CAAD,CAAT,GAAsE,EAF3F,EAGGC,KAHH,CAGSC,GAAG,IAAIZ,OAAO,CAACC,GAAR,CAAYW,GAAZ,CAHhB;AAID;AAAA","sourcesContent":["import { Cloudinary as CoreCloudinary, Util } from 'cloudinary-core';\n\nexport const url = (publicId, options) => {\n  const scOptions = Util.withSnakeCaseKeys(options);\n  const cl = CoreCloudinary.new();\n  return cl.url(publicId, scOptions);\n};\n\nexport const openUploadWidget = (options, callback) => {\n  const scOptions = Util.withSnakeCaseKeys(options);\n  window.cloudinary.openUploadWidget(scOptions, callback);\n};\n\nexport async function fetchPhotos(imageTag, setter) {\n  const options = {\n    cloudName: 'asmarphotocloud',\n    format: 'json',\n    type: 'list',\n    version: Math.ceil(new Date().getTime() / 1000),\n  };\n\n  const urlPath = url(imageTag.toString(), options);\n\n  fetch(urlPath)\n  console.log(urlPath)\n    .then(res => res.text())\n    .then(text => (text ? setter(JSON.parse(text).resources.map(image => image.public_id)) : []))\n    .catch(err => console.log(err));\n};\n"]},"metadata":{},"sourceType":"module"}